#!/usr/bin/python3
# file: core.py
# content: system simulator core
# created: 2020 November 14 Saturday
# modified:
# modification:
# author: roch schanen
# comment:

# SYMBOLS

EOL, SPC, NUL = "\n", " ", ""   

class VCDfile():

    def __init__(self, sh, fp = "./export.vcd"):
        # create file handle if path is given
        fh = self.create(fp) if fp else None
        # record conficguration
        self.config = sh, fh, 0
        # done
        return

    def create(self, fp):
        # load configuration
        sh, fh, N = self.config
        # close handle if active
        if fh: fh.close()
        # create file (new file)
        fh = open(fp, 'w')
        # make header
        fh.write(f"$version Generated by simsys.py $end{EOL}")
        fh.write(f"$date {sh.date} $end{EOL}")
        fh.write(f"$timescale 1ns $end{EOL}")
        # make modules and signals
        fh.write(f"$scope module SYSTEM $end{EOL}")
        # recursively build the list of devices in the system
        for d in sh.devicelist.values(): d.makeModule()        # !!!!!!!!!!!
        fh.write(f"$upscope $end{EOL}")
        # close header
        fh.write(f"$enddefinitions $end{EOL}")
        # done
        return fh

    def export(self):
        # load configuration
        sh, fh, N = self.config
        # recursively build the export string
        expstr = ""
        for d in sh.devicelist.values(): expstr += d.export()
        # check for empty string
        if expstr is NUL: return
        # export the string
        fh.write(f"#{sh.time:04}")
        fh.write(f"{SPC}{expstr}{EOL}")
        # done
        return

    def close(self):
        # export current state
        self.export()
        # close file
        fh.close()
        # save configuration
        self.config = sh, fh, N
        return

class logic_output_port():

    # generic name for a logic output port
    gn = "Q"

    # signal count for naming signals
    n = 0

    def __init__(self, bits = 1, pn = None):
        # init port state
        self.state = 'U'*bits
        # record port name
        self.pn = pn
        # record new signal
        self.signal = f"W{self.n}" if pn else None
        # increment signal index
        if self.signal: self.n += 1
        # done
        return


class logic_device():

    def __init__(self):
        # exports
        self.exports = []
        # devices
        self.devices = []
        # call user init
        self.start()
        #done
        return

    def start(self):
        

