#!/usr/bin/python3
# file: simsys.py
# content: system simulator
# created: 2020 july 19 Sunday
# modified:
# modification:
# author: roch schanen
# comment: system architecture simulator

# todo: make signals
# todo: make bus
# todo: make engine
# todo: make processor
# todo: make memory
# todo: make devices
# todo: make time, records, etc... 
# todo: break point, step-by-step, state display

# collect every device in the system
# run system engine and record data

from time import strftime 
from sys import exit

class system():

    def __init__(self, name):
        date = strftime("%A, %d %b %Y at %H:%M:%S")
        print(f"create system {name}\n{date}")
        self.devicelist = {}
        self.name = name
        self.date = date
        self.time = 0
        # done
        return

    # time units are in ns (float) 
    def addClock( 
        self,
        period = 20,    # 20ns, 50MHz
        width  = 10,    # symetrical clock
        phase  = 0,     # 0ns, in phase
        name   = None): # None, generic name

        # get generic clock name
        if not name:
            # find a new name
            n, k = 0, "clk0"
            while k in self.devicelist.keys():
                n += 1
                k = f"clk{n}"
            # found name
            name = k

        # create
        self.devicelist[name] = \
            clock(period, width, phase, name)

        # done
        return self.devicelist[name]

    # time units are in ns (float) 
    def addCounter( 
        self,
        size = 4,     # 4, half a byte
        name = None): # None, generic name

        # get generic counter name
        if not name:
            # find a new name
            n, k = 0, "cnt0"
            while k in self.devicelist.keys():
                n += 1
                k = f"cnt{n}"
            # found name
            name = k

        # create
        self.devicelist[name] = \
            counter(size, name)

        # done
        return self.devicelist[name]

    def displayDevices(self):
        for d in self.devicelist.values(): d.display()            
        return

    def openFile(self, pathName = "./output.vcd"):
        # create file
        fh = open(pathName, 'w')
        # make header
        fh.write(f"$version Generated by simsys.py $end\n")
        fh.write(f"$date {self.date} $end\n")
        # fh.write(f"$timezero 0 $end\n")
        fh.write(f"$timescale 1ns $end\n")
        # make modules and signals
        n = 0
        fh.write(f"$scope module SYSTEM $end\n")
        for d in self.devicelist.values():
            n = d.makeModule(fh, n, 0)
        fh.write(f"$upscope $end\n")
        # close header
        fh.write(f"$enddefinitions $end\n")
        # set initial values at time zero
        fh.write(f"#0\n")
        for d in self.devicelist.values():
            fh.write(d.getState())
        # done
        self.pathName = pathName
        self.fh = fh
        return

    def closeFile(self):
        self.fh.close()
        return

    def updateDevices(self):
        # increase time interval in units of 1ns
        self.time += 1
        # update device inputs
        for d in self.devicelist.values():
            d.updateInputPorts()        
        # check for a signal change
        change = ""        
        for d in self.devicelist.values():
            change += d.updateOutputPorts(self.time)
        # export if any change occured
        if change:
            self.fh.write(f"#{self.time}\n")
            self.fh.write(change)
        return

    def runUntil(self, time):
        while self.time < time:
            self.updateDevices()
        return

class port():

    def __init__(self, bits = 1):
        self.value = 'U'*bits
        return

    def get(self):
        return self.value

    def set(self, value):
        if not isinstance(value, str):
            print(f"port.set: value must be of string type.")
            print(f"  exiting...")
            exit()
        if not len(value) == len(self.value):
            print(f"port.set: value size mismatch:")
            print(f"  value size is {len(value)}.")
            print(f"  expected size is {len(self.value)}.")
            print(f"  exiting...")
            exit()
        self.value = value
        return

    def size(self):
        return len(self.value)

class counter():

    # activated when input connected
    clr = None # clear   (reset)
    trg = None # trigger (clock)
    wrt = None # write   (load)
    ena = None # enable  (output)
    cse = None # chip select

    def __init__(
        self,
        size,   # counter bits width 
        name):  # counter name
        # record data
        self.name = name
        self.configuration = size
        self.Q = port(size)
        # reset counter now
        self.Q.set("0000")
        return

    def makeModule(self, fh, n, t):
        # get data
        name = self.name
        size = self.configuration
        tab  = '\t'*(t+1)
        ide  = f"{name}_Q[{size-1}:0]"
        # write module
        fh.write(f"{tab}$scope module {name} $end\n")
        fh.write(f"{tab}\t$var wire {size} W{n} {ide} $end\n")
        fh.write(f"{tab}$upscope $end\n")
        # record signal reference (VCD)
        self.signal = f"W{n}"
        return n+1

    def getState(self):
        size = self.configuration
        if size == 1: return f"{self.Q.get()}{self.signal}\n"
        return f"b{self.Q.get()} {self.signal}\n"

    def display(self):
        # get data
        name = self.name
        size = self.configuration
        value = self.Q.get()
        # display
        print(f"CNT: {name},{size},{value}")
        return

    def addTrigger(self, inputPort):
        self.trg = inputPort
        self.trgState = inputPort.get()
        self.rising = False
        return

    def updateInputPorts(self):
        # detect trigger rising edge
        if self.trg:
            # next value
            n = self.trg.get()
            # detect rising edge
            if (self.trgState, n) == ('0','1'):
                # set flag
                self.rising = True
            # update state
            self.trgState = n
        #done
        return

    def updateOutputPorts(self, timeStamp):
        # update on rising edge
        if self.rising:
            # increment current value
            n = int(self.Q.get(),2)+1
            self.Q.set(f'{n:04b}'[-4:])
            # clear flag
            self.rising = False
            # return change
            return self.getState()
        # no change
        return ""

class clock():

    def __init__(
        self,
        period, # clock period (float time)
        width,  # pulse width  (float time)
        phase,  # phase shift  (float time)
        name):  # clock name
        # record data
        self.name = name
        self.configuration = period, width, phase
        self.port = port(1)
        # done
        return

    def makeModule(self, fh, n, t):
        # get data
        name = self.name
        tab  = '\t'*(t+1)
        # write module
        fh.write(f"{tab}$scope module {name} $end\n")
        fh.write(f"{tab}\t$var wire 1 W{n} {name}_CLK $end\n")
        fh.write(f"{tab}$upscope $end\n")
        # record signal reference (VCD)
        self.signal = f"W{n}"
        return n+1

    def getState(self):
        return f"{self.port.get()}{self.signal}\n"

    def display(self):
        # get data
        name = self.name
        period, width, phase = self.configuration
        value = self.port.get()
        # display
        print(f"CLK: {name},{period},{width},{phase},{value}")
        return

    def updateInputPorts(self):
        pass

    def updateOutputPorts(self, timeStamp):
        # get configuration
        period, width, phase = self.configuration
        # get new state
        m = (timeStamp-phase) % period
        s = ['0','1'][m < width]
        # continue
        if self.port.get() == s: return ""
        # update
        self.port.set(s)        
        # done
        return self.getState()

if __name__ == "__main__":

    import sys

    print("file: simsys.py")
    print("content: system simulator")
    print("created: 2020 july 19 Sunday")
    print("author: roch schanen")
    print("comment: system architecture simulator")
    print("run Python3:" + sys.version);

    # instanciate simulator
    s = system("version 0.00")
    # instanciate clock
    c = s.addClock()
    # instanciate counter
    n = s.addCounter()
    n.addTrigger(c.port)
    # show devices
    s.displayDevices()
    # open export file
    s.openFile()
    # run simulator
    s.runUntil(500)
    # close export file
    s.closeFile()
