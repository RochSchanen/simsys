#!/usr/bin/python3
# file: simsys.py
# content: system simulator
# created: 2020 july 19 Sunday
# modified:
# modification:
# author: roch schanen
# comment: system architecture simulator

# todo: make signals
# todo: make bus
# todo: make engine
# todo: make processor
# todo: make memory
# todo: make devices
# todo: make time, records, etc... 
# todo: break point, step-by-step, state display

# collect every device in the system
# run system engine and record data

from time import strftime 

class system():

    name = None
    date = None
    devicelist = {}

    def __init__(self, name):
        date = strftime("%A, %d %b %Y at %H:%M:%S")
        print(f"create system {name}\n{date}")
        # done
        self.name = name
        self.date = date
        return

    # time units are in ns (float) 
    def addClock( 
        self,
        period = 10,    # 10ns, 100MHz
        width  = 5,     # symetrical clock
        phase  = 0,     # 0ns, in phase
        name   = None): # None, generic name

        # get generic clock name
        if not name:
            # find a new name
            n, k = 0, "clk0"
            while k in self.devicelist.keys():
                n += 1
                k = f"clk{n}"
            # found name
            name = k

        # create
        self.devicelist[name] = \
            clock(period, width, phase, name)

        # done
        return

    def displayDevices(self):
        for d in self.devicelist.values(): d.display()            
        return

    # def openFile(self, pathName = "./output.vcd"):
    #     # create file
    #     fh = open(pathName, 'w')
    #     fh.write(f"$version Generated by simsys.py $end\n")
    #     fh.write(f"$date {s.date} $end\n")
    #     fh.write(f"$timezero 0 $end\n")
    #     fh.write(f"$timescale 1ns $end\n")
    #     n = 0
    #     fh.write(f"$scope module SYSTEM $end\n")
    #     for d in self.devicelist.keys():
    #         fh.write(f"$scope module {d} $end\n")
    #         p = self.devicelist[d].split(',')
    #         if p == 'CLK':
    #             fh.write(f"$var wire 1 W{n} {d}_CLK $end\n")
    #             n += 1
    #         fh.write(f"$upscope $end\n")
    #     fh.write(f"$upscope $end\n")
    #     # done
    #     self.fh = fh
    #     return

    # def closeFile(self):
    #     self.fh.close()
    #     return

    # def run(self):
    #     return

    # def updateClock(self, name):
    #     clock = self.devicelist[name]
    #     # fh.write(f"#010\n0c\n#020\n1c\n")

        return

class clock():

    def __init__(
        self,
        period, # clock period (float time)
        width,  # pulse width  (float time)
        phase,  # phase shift  (float time)
        name):  # clock name
        # done
        self.name = name
        self.configuration = period, width, phase
        self.state = 0                
        return

    def display(self):
        # get data
        name = self.name
        period, width, phase = self.configuration
        state = self.state
        # display
        print(f"CLK: {name},{period},{width},{phase},{state}")
        return

    # def update(self):
    #     pass

if __name__ == "__main__":

    import sys

    print("file: simsys.py")
    print("content: system simulator")
    print("created: 2020 july 19 Sunday")
    print("author: roch schanen")
    print("comment: system architecture simulator")
    print("run Python3:" + sys.version);

    s = system("version 0.00")
    s.addClock()
    s.addClock()
    s.addClock()
    s.addClock()
    s.displayDevices()
